// Code generated by MockGen. DO NOT EDIT.
// Source: order.go

// Package mock_shopify is a generated GoMock package.
package mock_shopify

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/r0busta/go-shopify-graphql-model/v3/graph/model"
	shopify "github.com/r0busta/go-shopify-graphql/v8"
	graphql "github.com/r0busta/graphql"
)

// MockOrderService is a mock of OrderService interface.
type MockOrderService struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceMockRecorder
}

// MockOrderServiceMockRecorder is the mock recorder for MockOrderService.
type MockOrderServiceMockRecorder struct {
	mock *MockOrderService
}

// NewMockOrderService creates a new mock instance.
func NewMockOrderService(ctrl *gomock.Controller) *MockOrderService {
	mock := &MockOrderService{ctrl: ctrl}
	mock.recorder = &MockOrderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderService) EXPECT() *MockOrderServiceMockRecorder {
	return m.recorder
}

// CaptureTransaction mocks base method.
func (m *MockOrderService) CaptureTransaction(ctx context.Context, input model.OrderCaptureInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CaptureTransaction", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// CaptureTransaction indicates an expected call of CaptureTransaction.
func (mr *MockOrderServiceMockRecorder) CaptureTransaction(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CaptureTransaction", reflect.TypeOf((*MockOrderService)(nil).CaptureTransaction), ctx, input)
}

// Get mocks base method.
func (m *MockOrderService) Get(ctx context.Context, id graphql.ID) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOrderServiceMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOrderService)(nil).Get), ctx, id)
}

// List mocks base method.
func (m *MockOrderService) List(ctx context.Context, opts shopify.ListOptions) ([]model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, opts)
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockOrderServiceMockRecorder) List(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockOrderService)(nil).List), ctx, opts)
}

// ListAfterCursor mocks base method.
func (m *MockOrderService) ListAfterCursor(ctx context.Context, opts shopify.ListOptions) ([]model.Order, *string, *string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAfterCursor", ctx, opts)
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(*string)
	ret2, _ := ret[2].(*string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ListAfterCursor indicates an expected call of ListAfterCursor.
func (mr *MockOrderServiceMockRecorder) ListAfterCursor(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAfterCursor", reflect.TypeOf((*MockOrderService)(nil).ListAfterCursor), ctx, opts)
}

// ListAll mocks base method.
func (m *MockOrderService) ListAll(ctx context.Context) ([]model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx)
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockOrderServiceMockRecorder) ListAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockOrderService)(nil).ListAll), ctx)
}

// Update mocks base method.
func (m *MockOrderService) Update(ctx context.Context, input model.OrderInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockOrderServiceMockRecorder) Update(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOrderService)(nil).Update), ctx, input)
}

// VoidTransaction mocks base method.
func (m *MockOrderService) VoidTransaction(ctx context.Context, input model.OrderCaptureInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VoidTransaction", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// VoidTransaction indicates an expected call of VoidTransaction.
func (mr *MockOrderServiceMockRecorder) VoidTransaction(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VoidTransaction", reflect.TypeOf((*MockOrderService)(nil).VoidTransaction), ctx, input)
}
